1.POSIX (Portable Operating System Interface) — это стандарт, определяющий интерфейс операционной системы для обеспечения совместимости между различными ОС.
 Прежде всего, POSIX ориентирован на UNIX-подобные системы.
2.Системный вызов — это интерфейс, через который программа на уровне пользователя может запросить услугу от ядра операционной системы.
3.Аппаратное прерывание возникает, когда периферийное устройство посылает сигнал процессору. Это может произойти, например,
 когда клавиатура отправляет сигнал о нажатии клавиши. Программное прерывание вызывается программой на уровне программного обеспечения
 и обычно служит для обращения к системным вызовам.
4.Процесс — это экземпляр программы в выполнении, включая текущее состояние программы, регистры и системные ресурсы.
5.Контекст процесса — это набор значений, сохраненных для процесса, чтобы восстановить его выполнение позже. Это включает в себя регистры процессора,
 стек, програмный счетчик и другие значения.
6.Родительский процесс — это процесс, который создает другой процесс. Дочерний процесс — это процесс, созданный другим процессом.
7.Процесс инициализации OS — это первый процесс, который запускается при старте системы. На Linux это процесс с PID 1, обычно называемый init.
8.Области памяти процесса включают:
Текстовая область (или код): содержит исполняемый код.
Данных: для глобальных и статических переменных.
Стек: для локальных переменных и информации о вызовах функций.
Куча (heap): динамически выделяемая память во время выполнения.
9.Системные процессы работают на уровне ядра и обеспечивают функции, необходимые для выполнения ОС. Пользовательские процессы запущены и контролируются пользователями.
10.Windows-сервисы — это программы, которые выполняются в фоновом режиме и обеспечивают различные системные функции.
Linux-демоны — это аналогичные фоновые процессы в UNIX-подобных системах.
11.В Windows для создания дочерних процессов используются CreateProcess, ShellExecute и др. CreateProcess предоставляет более гибкий контроль над создаваемым процессом.
12.В Linux для создания дочерних процессов используются fork() и exec(). fork() создает дочерний процесс, а exec() загружает новый образ программы в процесс.
13.Любой процесс автоматически имеет доступ к трём потокам данных: стандартный ввод (stdin), стандартный вывод (stdout) и стандартная ошибка (stderr).
14.WaitForSingleObject в Windows позволяет процессу ожидать завершения определенного объекта синхронизации (например, другого процесса или потока).
15.wait в Linux используется процессом для ожидания завершения одного из его дочерних процессов.
16.Процесс ОС — это экземпляр программы в выполнении, который имеет собственное виртуальное адресное пространство,
 системные ресурсы и состояние. Он состоит из кода программы, данных, текущего контекста выполнения и множества системных атрибутов.
 Процессы изолированы друг от друга, что обеспечивает защиту памяти и предотвращает взаимное воздействие без явного разрешения через механизмы межпроцессного взаимодействия.